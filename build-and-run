#! /bin/bash

set -euo pipefail

# This script first builds the docker container and then immediately runs it.

if [ ! -e app/.env ]; then
    echo "No file 'app/.env' to source. This is where local environment variables are stored that should not be committed to git."
    echo "That file will be sourced here. See app/example.env for a template."
    echo
    echo
    echo "Aborting!"
    exit 1
fi

source app/.env

echo "Host db location: $HOST_DATABASE_DIR"
echo "Docker db location: $DOCKER_DATABASE_DIR"

# When restarting the app, make a copy of the database as backup
if [ -e $HOST_DATABASE_DIR/app.db ]; then
    cp $HOST_DATABASE_DIR/app.db $(date +%Y%m%d)_app.db.bak
fi


curl $CERT_URL > app/$LDAP_CERT && chmod ugo+r app/$LDAP_CERT

docker build -t $DOCKER_IMAGE .

mkdir -p $HOST_DATABASE_DIR

# - container's port 80 will be mapped to $PORT. Make sure it's open on the host, e.g., with ufw.
# - container will store its sqlite3 db at $DATABASE_LOCATION on the host
# - container is run in daemon mode. Check logs with `docker logs bspc-effort-image`
docker run \
    -d \
    --name $DOCKER_CONTAINER \
    --mount type=bind,source=$HOST_DATABASE_DIR,target=$DOCKER_DATABASE_DIR \
    -p $DOCKER_PORT:80 \
    $DOCKER_IMAGE

echo
echo "  visit http://$(hostname):$DOCKER_PORT"
echo
echo "  use 'docker logs $DOCKER_CONTAINER -f' for logs"
echo
echo "  use 'docker exec -it $DOCKER_CONTAINER /bin/bash to inspect"
echo
echo "  use ./stop to stop the container"
echo
